Hypothesis: University towns have their mean housing prices less effected by recessions. Run a t-test to compare the ratio of the mean price of houses in university towns the quarter before the recession starts compared to the recession bottom. (price_ratio=quarter_before_recession/recession_bottom)

    
   



def get_list_of_university_towns():
# Returns a DataFrame of towns and the states they are in from the 
#    university_towns.txt list.

    import pandas as pd
    import re

    pattern = r'\[[^()]*\]'
    
    State_region = []
    
    
    with open('university_towns.txt') as fle: 
        for lne in fle:
            l = lne.rstrip('\n') 
            if l.endswith('[edit]'):
                state = re.sub(pattern, '', l)
                        
            else:
               
               bracket = '('
               x, bracket, tail = l.partition('(')
               #x = re.sub(r'\([^)]*\)', '', lne)
               ##x = re.sub(r'\[[^)]*\]', '', x)
               
               #x = x.split('[', 1)[0]
               #x = re.sub('[^A-Za-z0-9,.\s+ ]+', '', x)
               # x = re.sub('[\s+]+', '', x)
               x = x.rstrip()
               items = [state,x]
               State_region.append(items)
                
    read_df = pd.DataFrame.from_records(State_region, columns=['State', 'RegionName'])
    return read_df

def get_recession_start():
# Returns the year+qtr of th recession start after 2000.
# Raturns a string value as yyyqn

    
    import pandas as pd

    df_gdp = pd.read_excel('gdplev.xls', skiprows=219,usecols=[4,6])
# 2000 starts after 220 rows
    df_gdp.columns = ['Quarter', 'GDP']
    Recession_start_idx = 0

    for n in range(4, len(df_gdp)):
        a = (df_gdp.loc[n - 4, 'GDP'] > df_gdp.loc[n - 3, 'GDP'])
        b = (df_gdp.loc[n - 3, 'GDP'] > df_gdp.loc[n - 2, 'GDP'])
        c = (df_gdp.loc[n - 2, 'GDP'] < df_gdp.loc[n - 1, 'GDP'])
        d = (df_gdp.loc[n - 1, 'GDP'] < df_gdp.loc[n, 'GDP'])

        if (a and b and c and d):
            Recession_start_idx = n - 4
   
#If the GDP in quarters n-4..n satisfy the condition for the start of recession
    Base = df_gdp.loc[Recession_start_idx, 'Quarter']

    k = Recession_start_idx

    while (k > 0):
        if df_gdp.loc[k - 1, 'GDP'] > df_gdp.loc[k, 'GDP']:
            k = k - 1
        else:
            Base = df_gdp.loc[k + 1, 'Quarter']
            k = 0
    return Base

def get_recession_end():
    '''Returns the year and quarter of the recession end time as a 
    string value in a format such as 2005q3'''
    import pandas as pd

    df_gdp = pd.read_excel('gdplev.xls', skiprows=219,usecols=[4,6])
#2000 starts after 220 rows
    df_gdp.columns = ['Quarter', 'GDP']
    Recession_end_idx = 0

    for n in range(4, len(df_gdp)):
        a = (df_gdp.loc[n - 4, 'GDP'] > df_gdp.loc[n - 3, 'GDP'])
        b = (df_gdp.loc[n - 3, 'GDP'] > df_gdp.loc[n - 2, 'GDP'])
        c = (df_gdp.loc[n - 2, 'GDP'] < df_gdp.loc[n - 1, 'GDP'])
        d = (df_gdp.loc[n - 1, 'GDP'] < df_gdp.loc[n, 'GDP'])

        if (a and b and c and d):
            Recession_end_idx = n
   
#If the GDP in quarters n-4..n satisfy the condition for a recession
    Base = df_gdp.loc[Recession_end_idx, 'Quarter']

    

       
    return Base 

def get_recession_bottom():
#Returns the year and quarter of the recession bottom time as a 
#    string value in a format such as 2005q3

    import pandas as pd

    df_gdp = pd.read_excel('gdplev.xls', skiprows=219,usecols=[4,6])
#2000 starts after 220 rows
    df_gdp.columns = ['Quarter', 'GDP']
    Recession_bottom_idx = 0

    for n in range(4, len(df_gdp)):
        a = (df_gdp.loc[n - 4, 'GDP'] > df_gdp.loc[n - 3, 'GDP'])
        b = (df_gdp.loc[n - 3, 'GDP'] > df_gdp.loc[n - 2, 'GDP'])
        c = (df_gdp.loc[n - 2, 'GDP'] < df_gdp.loc[n - 1, 'GDP'])
        d = (df_gdp.loc[n - 1, 'GDP'] < df_gdp.loc[n, 'GDP'])

        if (a and b and c and d):
            Recession_bottom_idx = n - 2
   
#If the GDP in quarters n-4..n satisfy the condition for a recession
    Base = df_gdp.loc[Recession_bottom_idx, 'Quarter']

       
    return Base 

def convert_housing_data_to_quarters():
#    Converts the housing data to quarters and returns it as mean 
#    values in a dataframe with a multi-index
   
    
    Note: Quarters are defined in the assignment description, they are
    not arbitrary three month periods.
    
    
    import numpy as np 
    import pandas as pd
    
    
     
      
    df_housing = pd.read_csv('City_Zhvi_AllHomes.csv')
#df_housing = df_housing.drop(df_housing.columns[[0] + list(range(3,51))], axis=1)
    # drop all the unnecessary columns
    

    
    
    #     print(df_result.columns)
    
    states = {'OH': 'Ohio', 'KY': 'Kentucky', 'AS': 'American Samoa', 'NV': 'Nevada', 'WY': 'Wyoming', 'NA': 'National', 'AL': 'Alabama', 'MD': 'Maryland', 'AK': 'Alaska', 'UT': 'Utah', 'OR': 'Oregon', 'MT': 'Montana', 'IL': 'Illinois', 'TN': 'Tennessee', 'DC': 'District of Columbia', 'VT': 'Vermont', 'ID': 'Idaho', 'AR': 'Arkansas', 'ME': 'Maine', 'WA': 'Washington', 'HI': 'Hawaii', 'WI': 'Wisconsin', 'MI': 'Michigan', 'IN': 'Indiana', 'NJ': 'New Jersey', 'AZ': 'Arizona', 'GU': 'Guam', 'MS': 'Mississippi', 'PR': 'Puerto Rico', 'NC': 'North Carolina', 'TX': 'Texas', 'SD': 'South Dakota', 'MP': 'Northern Mariana Islands', 'IA': 'Iowa', 'MO': 'Missouri', 'CT': 'Connecticut', 'WV': 'West Virginia', 'SC': 'South Carolina', 'LA': 'Louisiana', 'KS': 'Kansas', 'NY': 'New York', 'NE': 'Nebraska', 'OK': 'Oklahoma', 'FL': 'Florida', 'CA': 'California', 'CO': 'Colorado', 'PA': 'Pennsylvania', 'DE': 'Delaware', 'NM': 'New Mexico', 'RI': 'Rhode Island', 'MN': 'Minnesota', 'VI': 'Virgin Islands', 'NH': 'New Hampshire', 'MA': 'Massachusetts', 'GA': 'Georgia', 'ND': 'North Dakota', 'VA': 'Virginia'}
    
    df_housing['State'] = df_housing['State'].map(states).fillna(df_housing['State'])
     
    df_result = pd.DataFrame(df_housing[['State', 'RegionName']])
    
       
   
    
    three_period_qtrs = list(range(2000,2016))
        
    for year in range(2000,2016):
        df_result[str(year) + 'q1'] = df_housing[[str(year) + '-01', str(year) + '-02', str(year) + '-03']].mean(axis = 1)
        df_result[str(year) + 'q2'] = df_housing[[str(year) + '-04', str(year) + '-05', str(year) + '-06']].mean(axis = 1)
        df_result[str(year) + 'q3'] = df_housing[[str(year) + '-07', str(year) + '-08', str(year) + '-09']].mean(axis = 1)
        df_result[str(year) + 'q4'] = df_housing[[str(year) + '-10', str(year) + '-11', str(year) + '-12']].mean(axis = 1)
    
    year = 2016
    df_result[str(year) + 'q1'] = df_housing[[str(year) + '-01', str(year) + '-02', str(year) + '-03']].mean(axis = 1)
    df_result[str(year) + 'q2'] = df_housing[[str(year) + '-04', str(year) + '-05', str(year) + '-06']].mean(axis = 1)
    df_result[str(year) + 'q3'] = df_housing[[str(year) + '-07', str(year) + '-08']].mean(axis = 1)
    
    #df_result['State'] = [states[state] for state in df_result['State']]
    
    df_result = df_result.set_index(['State', 'RegionName']) 
    
    
    
        
    #     print(result)
    return df_result

def run_ttest():
    
# First creates new data showing the decline or growth of housing prices
#    between the recession start and the recession bottom. Then runs a ttest
#    comparing the university town values to the non-university towns values, 
#    returns whether the alternative hypothesis (that the two groups are the same)
#    is true or not as well as the p-value of the confidence. 
    
#    Returns the tuple (different, p, better) where different=True if the t-test is
#   True at a p<0.01 (we reject the null hypothesis), or different=False if 
#   otherwise (we cannot reject the null hypothesis). The variable p is
#   equal to the exact p value returned from scipy.stats.ttest_ind(). The
#   value for better is either "university town" or "non-university town"
#   depending on which has a lower mean price ratio (which is equivilent to a
# reduced market loss).'''
    
    bottom = get_recession_bottom()
    start = get_recession_start()
    qtr_housing = convert_housing_data_to_quarters()
    varsity_towns = get_list_of_university_towns()
    
    # gettting all the data from from previously developed functions
    
    rec_start = qtr_housing.columns[qtr_housing.columns.get_loc(start) - 1]
    #getting data from the start of the recession
    
      
    #qtr_housing = qtr_housing[[bottom, rec_start, 'val_change']]
    
    # dropping the unnecessy cols

    
    qtr_housing['val_change'] =  qtr_housing[rec_start] - qtr_housing[bottom]
    
    # print(qtr_housing['val_change'])
    
    qtr_housing = qtr_housing.reset_index()
    
    varsity_towns_qtr_housing = pd.merge(qtr_housing, varsity_towns,how='inner',on=['State','RegionName'])
    varsity_towns_qtr_housing['uni'] = True
    
    #merging university towns with their housing data (inner join)
    
    total_housing = pd.merge(qtr_housing,varsity_towns_qtr_housing, how='outer', on=['State','RegionName',bottom, rec_start, 'val_change'])
    total_housing['uni'] = total_housing['uni'].fillna(False)
    
    #merging university towns data with total data, but with uniersity towns flagged (outer join)
    
    uni_towns = total_housing[total_housing['uni'] == True]
    non_uni_towns = total_housing[total_housing['uni'] == False]
    
    t,p = ttest_ind(uni_towns['val_change'].dropna(), non_uni_towns['val_change'].dropna())
    
    different = True if p<0.01 else False
    
    if  uni_towns['val_change'].mean() < non_uni_towns['val_change'].mean():
        better = "university town"
    else: better = "non-university town"
    
    # I dont really beieve this test but anyway...
    
    # return(True, 0.0001, True)
    return(different, p, better)
     
    
    
    

